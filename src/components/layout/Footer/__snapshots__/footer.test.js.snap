// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Component: Footer should render with home link 1`] = `
<footer>
  <div
    class="container"
  >
    <a
      href="/"
    >
      <img
        alt="home"
        src="function svgrLoader(source) {
  const callback = this.async();

  const _ref = (0, _loaderUtils.getOptions)(this) || {},
        {
    babel = true
  } = _ref,
        options = _objectWithoutPropertiesLoose(_ref, [\\"babel\\"]);

  const readSvg = () => new Promise((resolve, reject) => {
    this.fs.readFile(this.resourcePath, (err, result) => {
      if (err) reject(err);
      resolve(result);
    });
  });

  const previousExport = (() => {
    if (source.toString('utf-8').startsWith('export ')) {
      return source;
    }

    const exportMatches = source.toString('utf-8').match(/^module.exports\\\\s*=\\\\s*(.*)/);
    return exportMatches ? \`export default \${exportMatches[1]}\` : null;
  })();

  const tranformSvg = svg => (0, _core2.default)(svg, options, {
    caller: {
      name: '@svgr/webpack',
      previousExport,
      defaultPlugins: [_pluginSvgo.default, _pluginJsx.default]
    },
    filePath: this.resourcePath
  }).then(jsCode => {
    if (!babel) return jsCode;
    return (0, _core.transformAsync)(jsCode, babelOptions).then(({
      code
    }) => code);
  }).then(result => callback(null, result)).catch(err => callback(err));

  if (previousExport) {
    readSvg().then(tranformSvg);
  } else {
    tranformSvg(source);
  }
}"
      />
      Back to Home
    </a>
    This is a coding exercise for Sherpany company
  </div>
</footer>
`;

exports[`Component: Footer should render with home link and warning msg 1`] = `
<footer>
  <div
    class="warning"
  >
    <img
      alt="warning"
      src="function svgrLoader(source) {
  const callback = this.async();

  const _ref = (0, _loaderUtils.getOptions)(this) || {},
        {
    babel = true
  } = _ref,
        options = _objectWithoutPropertiesLoose(_ref, [\\"babel\\"]);

  const readSvg = () => new Promise((resolve, reject) => {
    this.fs.readFile(this.resourcePath, (err, result) => {
      if (err) reject(err);
      resolve(result);
    });
  });

  const previousExport = (() => {
    if (source.toString('utf-8').startsWith('export ')) {
      return source;
    }

    const exportMatches = source.toString('utf-8').match(/^module.exports\\\\s*=\\\\s*(.*)/);
    return exportMatches ? \`export default \${exportMatches[1]}\` : null;
  })();

  const tranformSvg = svg => (0, _core2.default)(svg, options, {
    caller: {
      name: '@svgr/webpack',
      previousExport,
      defaultPlugins: [_pluginSvgo.default, _pluginJsx.default]
    },
    filePath: this.resourcePath
  }).then(jsCode => {
    if (!babel) return jsCode;
    return (0, _core.transformAsync)(jsCode, babelOptions).then(({
      code
    }) => code);
  }).then(result => callback(null, result)).catch(err => callback(err));

  if (previousExport) {
    readSvg().then(tranformSvg);
  } else {
    tranformSvg(source);
  }
}"
    />
    While finder is active, more users will not be loaded by scrolling
  </div>
  <div
    class="container"
  >
    <a
      href="/"
    >
      <img
        alt="home"
        src="function svgrLoader(source) {
  const callback = this.async();

  const _ref = (0, _loaderUtils.getOptions)(this) || {},
        {
    babel = true
  } = _ref,
        options = _objectWithoutPropertiesLoose(_ref, [\\"babel\\"]);

  const readSvg = () => new Promise((resolve, reject) => {
    this.fs.readFile(this.resourcePath, (err, result) => {
      if (err) reject(err);
      resolve(result);
    });
  });

  const previousExport = (() => {
    if (source.toString('utf-8').startsWith('export ')) {
      return source;
    }

    const exportMatches = source.toString('utf-8').match(/^module.exports\\\\s*=\\\\s*(.*)/);
    return exportMatches ? \`export default \${exportMatches[1]}\` : null;
  })();

  const tranformSvg = svg => (0, _core2.default)(svg, options, {
    caller: {
      name: '@svgr/webpack',
      previousExport,
      defaultPlugins: [_pluginSvgo.default, _pluginJsx.default]
    },
    filePath: this.resourcePath
  }).then(jsCode => {
    if (!babel) return jsCode;
    return (0, _core.transformAsync)(jsCode, babelOptions).then(({
      code
    }) => code);
  }).then(result => callback(null, result)).catch(err => callback(err));

  if (previousExport) {
    readSvg().then(tranformSvg);
  } else {
    tranformSvg(source);
  }
}"
      />
      Back to Home
    </a>
    This is a coding exercise for Sherpany company
  </div>
</footer>
`;

exports[`Component: Footer should render with settings link 1`] = `
<footer>
  <div
    class="container"
  >
    <a
      href="/settings"
    >
      <img
        alt="settings"
        src="function svgrLoader(source) {
  const callback = this.async();

  const _ref = (0, _loaderUtils.getOptions)(this) || {},
        {
    babel = true
  } = _ref,
        options = _objectWithoutPropertiesLoose(_ref, [\\"babel\\"]);

  const readSvg = () => new Promise((resolve, reject) => {
    this.fs.readFile(this.resourcePath, (err, result) => {
      if (err) reject(err);
      resolve(result);
    });
  });

  const previousExport = (() => {
    if (source.toString('utf-8').startsWith('export ')) {
      return source;
    }

    const exportMatches = source.toString('utf-8').match(/^module.exports\\\\s*=\\\\s*(.*)/);
    return exportMatches ? \`export default \${exportMatches[1]}\` : null;
  })();

  const tranformSvg = svg => (0, _core2.default)(svg, options, {
    caller: {
      name: '@svgr/webpack',
      previousExport,
      defaultPlugins: [_pluginSvgo.default, _pluginJsx.default]
    },
    filePath: this.resourcePath
  }).then(jsCode => {
    if (!babel) return jsCode;
    return (0, _core.transformAsync)(jsCode, babelOptions).then(({
      code
    }) => code);
  }).then(result => callback(null, result)).catch(err => callback(err));

  if (previousExport) {
    readSvg().then(tranformSvg);
  } else {
    tranformSvg(source);
  }
}"
      />
      Go to Settings
    </a>
    This is a coding exercise for Sherpany company
  </div>
</footer>
`;

exports[`Component: Footer should render with settings link and warning msg 1`] = `
<footer>
  <div
    class="warning"
  >
    <img
      alt="warning"
      src="function svgrLoader(source) {
  const callback = this.async();

  const _ref = (0, _loaderUtils.getOptions)(this) || {},
        {
    babel = true
  } = _ref,
        options = _objectWithoutPropertiesLoose(_ref, [\\"babel\\"]);

  const readSvg = () => new Promise((resolve, reject) => {
    this.fs.readFile(this.resourcePath, (err, result) => {
      if (err) reject(err);
      resolve(result);
    });
  });

  const previousExport = (() => {
    if (source.toString('utf-8').startsWith('export ')) {
      return source;
    }

    const exportMatches = source.toString('utf-8').match(/^module.exports\\\\s*=\\\\s*(.*)/);
    return exportMatches ? \`export default \${exportMatches[1]}\` : null;
  })();

  const tranformSvg = svg => (0, _core2.default)(svg, options, {
    caller: {
      name: '@svgr/webpack',
      previousExport,
      defaultPlugins: [_pluginSvgo.default, _pluginJsx.default]
    },
    filePath: this.resourcePath
  }).then(jsCode => {
    if (!babel) return jsCode;
    return (0, _core.transformAsync)(jsCode, babelOptions).then(({
      code
    }) => code);
  }).then(result => callback(null, result)).catch(err => callback(err));

  if (previousExport) {
    readSvg().then(tranformSvg);
  } else {
    tranformSvg(source);
  }
}"
    />
    While finder is active, more users will not be loaded by scrolling
  </div>
  <div
    class="container"
  >
    <a
      href="/settings"
    >
      <img
        alt="settings"
        src="function svgrLoader(source) {
  const callback = this.async();

  const _ref = (0, _loaderUtils.getOptions)(this) || {},
        {
    babel = true
  } = _ref,
        options = _objectWithoutPropertiesLoose(_ref, [\\"babel\\"]);

  const readSvg = () => new Promise((resolve, reject) => {
    this.fs.readFile(this.resourcePath, (err, result) => {
      if (err) reject(err);
      resolve(result);
    });
  });

  const previousExport = (() => {
    if (source.toString('utf-8').startsWith('export ')) {
      return source;
    }

    const exportMatches = source.toString('utf-8').match(/^module.exports\\\\s*=\\\\s*(.*)/);
    return exportMatches ? \`export default \${exportMatches[1]}\` : null;
  })();

  const tranformSvg = svg => (0, _core2.default)(svg, options, {
    caller: {
      name: '@svgr/webpack',
      previousExport,
      defaultPlugins: [_pluginSvgo.default, _pluginJsx.default]
    },
    filePath: this.resourcePath
  }).then(jsCode => {
    if (!babel) return jsCode;
    return (0, _core.transformAsync)(jsCode, babelOptions).then(({
      code
    }) => code);
  }).then(result => callback(null, result)).catch(err => callback(err));

  if (previousExport) {
    readSvg().then(tranformSvg);
  } else {
    tranformSvg(source);
  }
}"
      />
      Go to Settings
    </a>
    This is a coding exercise for Sherpany company
  </div>
</footer>
`;
